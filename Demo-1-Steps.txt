1. Install uv installer
2. Install hatch app manager
3. Make python app using 'hatch new <project_name>'
    - This will create the basic structure for your backend
4. Edit the pyproject.toml to reflect your app
5. Create a virtual environment (.venv) 'hatch run uv sync'
    - uv will make a venv folder in your directory, make sure to include .venv in your .gitignore
6. Create a main.py in the src/app folder, 'print(hello world)' for example
7. Run using 'hatch run python src/app/main.py'
8. Attach 'pre commit tool' to the CI/CD flow
    - 'pip install pre-commit'
    - Create .pre-commit-config.yaml file identical to prof's repo
    - 'pre-commit install' to attach pre-commit execution to 'git commit' executable
    - Now, with every potential update to the repo, the steps to take are:
    1. 'git add <changes to repo>'
    2. 'git commit -m "msg"'
    3. pre-commit will check the update and if all tests pass, will stage the commit for pushing.
    4. If pre-commit detects issues, it will make changes to those files, you then need to 'git add' the changes that pre-commit made to the files and then commit again
    5. 'git push' once changes are resolved
9. To add dependencies to your .venv and not to your machine, run 'hatch run uv add <dependency>'
10. To run the application with fastapi framework (see src/app/main.py for framework call), 'hatch run fastapi dev src/app/main.py'
    - The terminal will then show the API doc URL and the server URL
11. In the src/app create 5 folders
    - core: config and settings
    - models: database models
    - schemas
    - routes
    - services
12. Look at a post request and see the update on the fastapi api page
13. Add a response model to the post request so that other devs can expect a certain response format.
14. Add a status code to the post as a 201
15. Security implementation for OAuth2 (FastAPI -> Security -> Security-First Steps) - Enables the authorize button on the API page
    - (FastAPI -> Security -> Get Current User) Create a user model with a security auth token
    - (FastAPI -> Security -> Simple OAuth2 with Password and Bearer) - uses a fake database to create fake users, post will work, for get(user) to work, the user needs to be authenticated (WRONG WAY OF DOING THIS, VERY UNSAFE)
16. Security using OAuth2 JWT
    - 'hatch run uv add pyJWT', and 'hatch run uv add "passlib[bcrypt]"'
    - Paste code from (FastAPI -> Security -> OAuth2 with Password and Bearer, with JWT), NEVER SHOW YOUR SECRET KEY
    - Now, when the user logs in, an access token is provided.
17. SQL Database integration
    - 'hatch run uv add sqlmodel'
    - Paste the code from SQL example from FastAPI website
    - THIS IS THE MOST IMPORTANT EXAMPLE
    - This example shows how to make a user, link it to a database, and how to remove those users
